@model AllInSkateChallenge.Features.LeaderBoard.LeaderBoardViewComponentModel

<div id="leaderboard-list-app">

    @if (Model.ShowFilter)
    {
        <div class="input-group mt-3 mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="target-distance">Target</span>
            </div>
            <select name="target" asp-for="@Model.FilterValue" asp-items="@Model.FilterItems" class="form-control" aria-label="Sort Order" aria-describedby="target-distance" v-model="skateTarget" v-on:change="getLeaderBoard"></select>
        </div>
    }

    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Skater</th>
                <th scope="col">Total Kilometres</th>
            </tr>
        </thead>
        <tbody>
            <template v-for="skater in skaters">
                <tr>
                    <td class="align-middle"><span v-bind:class="getPositionClass(skater.position)">{{skater.position}}</span></td>
                    <td class="align-middle">
                        <img v-bind:src="skater.profileImage" v-bind:alt="getProfileAltText(skater.skaterName)" class="leaderboard-profile" />
                        {{skater.skaterName}}
                    </td>
                    <td class="align-middle">{{skater.totalKilometres.toFixed(2)}}</td>
                </tr>
            </template>
        </tbody>
    </table>

</div>

<script type="text/javascript" on-content-loaded="true">
    $(document).ready(function () {
        var leaderBoardApp = new Vue({
            el: '#leaderboard-list-app',
            data: {
                skaters: [],
                skateTarget: "@Model.FilterValue",
                limit: @(Model.Limit ?? 0)
            },
            mounted: function () {
                this.getLeaderBoard();
            },
            methods: {
                getPositionClass: function (position) {
                    switch (position) {
                        case 1:
                            return "leaderboard-position leaderboard-position--first";
                            break;
                        case 2:
                            return "leaderboard-position leaderboard-position--second";
                            break;
                        case 3:
                            return "leaderboard-position leaderboard-position--third";
                            break;
                        default:
                            return "leaderboard-position";
                            break;
                    }
                },
                getProfileAltText: function (skaterName) {
                    return skaterName + " Profile Image";
                },
                getLeaderBoard: function () {
                    var url = "@Model.LeaderBoardUrl" + this.skateTarget;

                    if (this.limit > 0) {
                        url += "?limit=" + this.limit;
                    }

                    $.get(url, function (data) {
                        leaderBoardApp.skaters = data;
                    });
                }
            }
        });
    });
</script>