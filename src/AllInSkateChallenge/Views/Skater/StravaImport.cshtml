@model AllInSkateChallenge.Features.Framework.Models.PageViewModel<AllInSkateChallenge.Features.Skater.StravaImport.StravaImportViewModel>

@{
    Layout = "_PageViewModelLayout";
}

@if (Model.Content.Fault != null)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Oh Dear! we could not retrieve your Strava Activities!</h4>
        <p>Strava raised the following message: @Model.Content.Fault.Message</p>
        @if (Model.Content.Fault.Errors != null && Model.Content.Fault.Errors.Any())
        {
            <hr>
            <ul>
                @foreach (var error in Model.Content.Fault.Errors)
                {
                    <li><strong>@error.Resource</strong> of <strong>@error.Field</strong> is <strong>@error.Code</strong></li>
                }
            </ul>
        }
    </div>
}

@if (!Model.CurrentUser.HasPaid)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Please note that Roller Girl Gang CIC has either not yet received or not yet processed your Skate Challenge entry fee. You will not be able to import your activities from Strava until this has been processed.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

@if (Model.Content.Activities != null)
{
    <div id="activityAlert" class="alert alert-success fade show" role="alert" style="display:none;">
        <strong>Awesome!</strong> Your strava activity has been imported. Why not check out <a asp-controller="SkaterProgress" asp-action="Progress" class="alert-link">Your Progress</a> now?
    </div>

    <div class="form-check">
        <input type="checkbox" class="form-check-input js-toggle-ineligible-imports" id="ineligibleImportToggle">
        <label class="form-check-label" for="ineligibleImportToggle">Show activities which are not eligible for importing.</label>
    </div>

    <table class="table table-hover mt-3">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Type</th>
                <th scope="col">Date</th>
                <th scope="col">Miles</th>
                <th scope="col">Import</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in Model.Content.Activities)
            {
                <tr data-activity-id="@activity.ActivityId" data-activity-eligible="@activity.IsEligableActivity" style="@(activity.IsEligableActivity ? "" : "display: none;")">
                    <td class="align-middle">@activity.DisplayActivityType</td>
                    <td class="align-middle">@activity.StartDate.ToString("dd/MM/yyyy")</td>
                    <td class="align-middle">@activity.Miles.ToString("F2")</td>
                    <td class="align-middle js-action-column">
                        @if (!activity.IsImported && activity.IsEligableActivity && Model.CurrentUser.HasPaid)
                        {
                            <button type="button" class="btn btn-primary js-import-strava" 
                                    data-activity-id="@activity.ActivityId" 
                                    data-start-date="@activity.StartDate.ToString("O")" 
                                    data-miles="@activity.Miles" 
                                    data-lowest-elevation="@activity.LowestElevation"
                                    data-highest-elevation="@activity.HighestElevation"
                                    data-total-elevation="@activity.TotalElevation"
                                    data-average-speed="@activity.AverageSpeed"
                                    data-top-speed="@activity.TopSpeed"
                                    data-name="@activity.Name"
                                    data-duration="@activity.Duration">Import</button>
                        }
                        else if (activity.IsImported)
                        {
                            <span>Imported</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".js-toggle-ineligible-imports").click(function () {
                $("tr[data-activity-eligible='False']").toggle(this.checked);
            });

            $(".js-import-strava").click(function (event) {
                var activityId = $(event.target).data("activity-id");
                var startDate = $(event.target).data("start-date");
                var miles = $(event.target).data("miles");
                var name = $(event.target).data("name");
                var lowestElevation = $(event.target).data("lowest-elevation");
                var highestElevation = $(event.target).data("highest-elevation");
                var totalElevation = $(event.target).data("total-elevation");
                var averageSpeed = $(event.target).data("average-speed");
                var topSpeed = $(event.target).data("top-speed");
                var duration = $(event.target).data("duration");

                $.post("/skater/skate-log/strava-import/save", { "activityId": activityId, "logged": startDate, "miles": miles, "name": name, "lowestElevation": lowestElevation, "highestElevation": highestElevation, "totalElevation": totalElevation, "averageSpeed": averageSpeed, "topSpeed": topSpeed, "duration": duration })
                    .done(function () {
                        $("tr[data-activity-id='" + activityId + "']").children().eq(3).html("<span>Imported</span>");
                        CreateNotification("success", "<strong>Awesome!</strong> Your strava activity has been imported. Why not check out <a href='/skater/progress/' class='alert-link'>Your Progress</a> now?");
                    })
                    .fail(function () {
                        CreateNotification("danger", "<strong>Oh No!</strong>, something went wrong importing your activity. Please try again in a minute.");
                    });
            });

            IgnoreIneligibleActivities();
        });

        function IgnoreIneligibleActivities() {
            var stravaActivityIds = $("tr[data-activity-eligible='False']").map(function () { return $(this).data("activity-id"); }).get();

            $.post("/skater/skate-log/strava-import/ignore", { "StravaActivityIds": stravaActivityIds })
                .done(function (data) {
                    if (data.activitiesIgnored == 1) {
                        CreateNotification("success", "We have identified 1 new activity that is not eligible for this challenge, you will no longer recieve a notification about this activity.");
                    }
                    else if (data.activitiesIgnored > 1) {
                        CreateNotification("success", "We have identified " + data.activitiesIgnored + " new activities that are not eligible for this challenge, you will no longer recieve notifications about these activities.");
                    }
                });
        }

        function CreateNotification(type, message) {
            $("#activityAlert").html(message);

            if (type === "success") {
                $("#activityAlert").removeClass("alert-danger");
                $("#activityAlert").addClass("alert-success");
            } else {
                $("#activityAlert").removeClass("alert-success");
                $("#activityAlert").addClass("alert-danger");
            }

            $("#activityAlert").show();
        }
    </script>
}
