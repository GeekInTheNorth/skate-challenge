@using AllInSkateChallenge.Features.Skater;
@model AllInSkateChallenge.Features.Framework.Models.PageViewModel<AllInSkateChallenge.Features.Skater.SkateLog.SkaterLogViewModel>

@{
    Layout = "_PageViewModelLayout";
    var darkRow = false;
}

@if (Model.CurrentUser.HasPaid)
{
    <div class="row">
        <div class="col-xl-12">
            <button type="button" class="btn btn-primary js-add-mileage-entry mt-3 mb-3">+ Log Activity</button>
            <button type="button" class="btn btn-primary js-add-mileage-entry-full mt-3 mb-3">+ Log Detailed Activity</button>
            @if (Model.IsStravaAuthenticated)
            {
                <a asp-controller="StravaImport" asp-action="Index" class="btn btn-strava" title="Import from Strava"></a>
            }
            else if (Model.IsStravaUser)
            {
                <button type="button" class="btn btn-strava-disabled" title="Import from Strava"></button>
            }
        </div>
    </div>
}
else
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Please note that Roller Girl Gang CIC has either not yet received or not yet processed your Virtual Skate Marathon entry fee. You will not be able to log your activities until this has been processed.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="row">
        <div class="col-xl-12">
            <button type="button" class="btn btn-primary disabled mt-3 mb-3">+ Log Activity</button>
            <button type="button" class="btn btn-primary disabled mt-3 mb-3">+ Log Detailed Activity</button>
            @if (Model.IsStravaUser)
            {
                <button type="button" class="btn btn-strava-disabled" title="Import from Strava"></button>
            }
        </div>
    </div>
}

@if (Model.Content.RecordExists)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        Your activity has not been created as it already exists. Activities which have the same date, distance and name are considered to be duplicate entries.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<vc:personal-statistics mileage-entries="@Model.Content.Entries" title="Your Personal Summary"></vc:personal-statistics>

<div class="container mb-2">
    <div class="row">
        <div class="col-1 p-2 bg-dark text-light"></div>
        <div class="col-5 p-2 bg-dark text-light">Journey</div>
        <div class="col-3 p-2 bg-dark text-light">Logged</div>
        <div class="col-2 p-2 bg-dark text-light">Kilometres</div>
        <div class="col-1 p-2 bg-dark text-light"></div>
    </div>
    @foreach (var entry in Model.Content.Entries)
    {
        darkRow = !darkRow;
        <div class="row border-bottom @(darkRow?"bg-light":"bg-white")" data-entry-id="@entry.SkateLogEntryId">
            <div class="col-1 p-1 align-middle">
                <button type="button" class="btn btn-sm btn-primary js-toggle-detail" data-target-container="detail-@entry.SkateLogEntryId">
                    <img src="~/images/open-iconic/chevron-bottom.svg" alt="Expand" />
                </button>
            </div>
            <div class="col-5 p-2">@entry.Name</div>
            <div class="col-3 p-2">@entry.Logged.ToString("dd/MM/yyyy HH:mm")</div>
            <div class="col-2 p-2">@entry.DistanceInKilometres.ToString("F2")</div>
            <div class="col-1 p-1 align-middle">
                <button type="button" class="btn btn-sm btn-danger js-delete-mileage-entry" data-entry-id="@entry.SkateLogEntryId">
                  <img src="~/images/open-iconic/trash.svg" alt="Trash" />
                </button>
            </div>
        </div>
        <div id="detail-@entry.SkateLogEntryId" class="row border-bottom d-none @(darkRow?"bg-light":"bg-white")" data-entry-id="@entry.SkateLogEntryId">
            <div class="col-12 p-2">
                <table class="table table-striped">
                    <tr>
                        <th class="border-right">Total Distance</th>
                        <td>@entry.DistanceInKilometres.ToString("F2") Kilometres</td>
                        <td>@entry.DistanceInMiles.ToString("F2") Miles</td>
                    </tr>
                    <tr>
                        <th class="border-right">Total Elevation Gain</th>
                        <td>@entry.ElevationGainInMetres.ToString("F2") Metres</td>
                        <td>@entry.ElevationGainInFeet.ToString("F2") Feet</td>
                    </tr>
                    <tr>
                        <th class="border-right">Lowest Elevation</th>
                        <td>@entry.LowestElevationInMetres.ToString("F2") Metres</td>
                        <td>@entry.LowestElevationInFeet.ToString("F2") Feet</td>
                    </tr>
                    <tr>
                        <th class="border-right">Highest Elevation</th>
                        <td>@entry.HighestElevationInMetres.ToString("F2") Metres</td>
                        <td>@entry.HighestElevationInFeet.ToString("F2") Feet</td>
                    </tr>
                    <tr>
                        <th class="border-right">Average Speed</th>
                        <td>@entry.AverageSpeedInKph.ToString("F2") KPH</td>
                        <td>@entry.AverageSpeedInMph.ToString("F2") MPH</td>
                    </tr>
                    <tr>
                        <th class="border-right">Top Speed</th>
                        <td>@entry.TopSpeedInKph.ToString("F2") KPH</td>
                        <td>@entry.TopSpeedInMph.ToString("F2") MPH</td>
                    </tr>
                    @if (Model.IsStravaAuthenticated)
                    {
                        <tr>
                            <th class="border-right">Logged By</th>
                            <td colspan="2">@(string.IsNullOrWhiteSpace(entry.StravaId) ? "User" : "Strava")</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="deleteEntryModal" tabindex="-1" role="dialog" aria-labelledby="deleteEntryLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-allin-green">
            <div class="modal-header bg-allin-green">
                <h5 class="modal-title text-dark" id="deleteEntryLabel">Delete Mileage Entry</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this mileage log entry?
            </div>
            <div class="modal-footer border-allin-green">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger js-confirm-delete-mileage-entry">Delete</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addEntryModal" tabindex="-1" role="dialog" aria-labelledby="saveEntryLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content border-allin-green">
            <div class="modal-header bg-allin-green">
                <h5 class="modal-title text-dark" id="saveEntryLabel">Log new miles!</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="createForm" method="post" asp-controller="SkaterLog" asp-action="Index" asp-antiforgery="true">
                <div class="modal-body">
                    <p>Please enter the details of your skating journey.  This should represent a single journey on skates.</p>
                    <div class="form-group">
                        <label for="distanceUnit">Distance Unit</label>
                        @Html.DropDownList(nameof(INewSkaterLogEntry.DistanceUnit), new SelectList(new[] { DistanceUnit.Kilometres, DistanceUnit.Miles }), new { @class = "form-control", aria_describedby = "distanceUnitHelp" })
                        <small id="distanceUnitHelp" class="form-text text-muted">Distance can be logged in miles or kilometres, but will be converted into miles.</small>
                    </div>
                    <div class="form-group">
                        <label for="distance">Distance this session</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.Distance), Model.Content.Distance, new { @type = "number", @class = "form-control", aria_describedby = "distanceHelp", step = "0.01", min = "0", max = "1000" })
                        <small id="distanceHelp" class="form-text text-muted">Partial miles or kilometres can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                    <div class="form-group">
                        <label for="journeyName">Journey Name</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.JourneyName), Model.Content.JourneyName, new { @class = "form-control", aria_describedby = "journeyNameHelp" })
                        <small id="journeyNameHelp" class="form-text text-muted">An optional name for your skating session.</small>
                    </div>
                    <div class="form-group">
                        <label>Date Skated</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.DateSkated), Model.Content.DateSkated, new { @type = "date", @class = "form-control", aria_describedby = "dateSkatedHelp", step = "1", min = "2024-05-01", max = "2025-01-01" })
                        <small id="dateSkatedHelp" class="form-text text-muted">Today's date will be used if this field is left blank.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="velocityUnit">Velocity Unit</label>
                        @Html.DropDownList(nameof(INewSkaterLogEntry.VelocityUnit), new SelectList(new[] { VelocityUnit.KilometersPerHour, VelocityUnit.MilesPerHour }), new { @class = "form-control", aria_describedby = "velocityUnitHelp" })
                        <small id="velocityUnitHelp" class="form-text text-muted">Speed can be logged in miles per hour or kilometres per hour, but will be converted into miles.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="averageSpeed">Average Speed</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.AverageSpeed), Model.Content.AverageSpeed, new { @type = "number", @class = "form-control js-detail-form-field", aria_describedby = "averageSpeedHelp", step = "0.01", min = "0", max = "100" })
                        <small id="averageSpeedHelp" class="form-text text-muted">Partial speeds can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="topSpeed">Top Speed</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.TopSpeed), Model.Content.AverageSpeed, new { @type = "number", @class = "form-control js-detail-form-field", aria_describedby = "topSpeedHelp", step = "0.01", min = "0", max = "100" })
                        <small id="topSpeedHelp" class="form-text text-muted">Partial speeds can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="elevationUnit">Elevation Unit</label>
                        @Html.DropDownList(nameof(INewSkaterLogEntry.ElevationUnit), new SelectList(new[] { DistanceUnit.Metres, DistanceUnit.Feet }), new { @class = "form-control", aria_describedby = "elevationUnitHelp" })
                        <small id="elevationUnitHelp" class="form-text text-muted">Elevation can be logged in metres or feet, but will be converted into feet.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="elevationGain">Total Elevation Gain</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.ElevationGain), Model.Content.LowestElevation, new { @type = "number", @class = "form-control js-detail-form-field", aria_describedby = "elevationGainHelp", step = "0.01", min = "0", max = "10000" })
                        <small id="elevationGainHelp" class="form-text text-muted">The total elevation gain of your journey. Partial elevation can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="lowestElevation">Lowest Elevation</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.LowestElevation), Model.Content.LowestElevation, new { @type = "number", @class = "form-control js-detail-form-field", aria_describedby = "lowestElevationHelp", step = "0.01", min = "0", max = "10000" })
                        <small id="lowestElevationHelp" class="form-text text-muted">The lowest altitude of your journey. Partial elevation can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                    <div class="form-group js-detail-form">
                        <label for="highestElevation">Highest Elevation</label>
                        @Html.TextBox(nameof(INewSkaterLogEntry.HighestElevation), Model.Content.AverageSpeed, new { @type = "number", @class = "form-control js-detail-form-field", aria_describedby = "highestElevationHelp", step = "0.01", min = "0", max = "10000" })
                        <small id="highestElevationHelp" class="form-text text-muted">The highest altitude of your journey. Partial elevation can be entered by typing a decimal value e.g. 4.5.</small>
                    </div>
                </div>
                <div class="modal-footer border-allin-green">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary js-confirm-create-mileage-entry">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $(".js-delete-mileage-entry").click(function (event) {
                $(".js-confirm-delete-mileage-entry").data("entry-id", ($(event.currentTarget).data("entry-id")));
                $("#deleteEntryModal").modal({ keyboard: true, focus: true });
            });

            $(".js-confirm-delete-mileage-entry").click(function (event) {
                var rowSelector = "div[data-entry-id='" + $(event.currentTarget).data("entry-id") + "']";
                $.post("/skater/skate-log/delete", { "mileageEntryId": $(event.currentTarget).data("entry-id") })
                    .done(function () {
                        $(rowSelector).remove();
                        $("#deleteEntryModal").modal('hide');
                    });
            });

            $(".js-add-mileage-entry").click(function () {
                $(".js-detail-form").addClass("d-none");
                $(".js-detail-form-field").val(0);
                $("#addEntryModal").modal({ keyboard: true, focus: true });
            });

            $(".js-add-mileage-entry-full").click(function () {
                $(".js-detail-form").removeClass("d-none");
                $("#addEntryModal").modal({ keyboard: true, focus: true });
            });

            $("#createForm").submit(function (event) {
                $(".js-confirm-create-mileage-entry").prop("disabled", true);

                setTimeout(function () { $(".js-confirm-create-mileage-entry").prop("disabled", false); }, 5000);
            });

            $(".js-toggle-detail").click(function (event) {
                var detailContainer = $(event.currentTarget).data("target-container");
                var detailContainerSelector = "#" + detailContainer;
                var isHidden = $(detailContainerSelector).hasClass("d-none");
                if (isHidden) {
                    $(detailContainerSelector).removeClass("d-none");
                }
                else {
                    $(detailContainerSelector).addClass("d-none");
                }
                
            });
        });
    </script>
}